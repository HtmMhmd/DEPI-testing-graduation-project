package com.swaglabs.tests;

import com.swaglabs.pages.LoginPage;
import com.swaglabs.pages.ProductsPage;
import com.swaglabs.utils.WebDriverManager;
import org.junit.jupiter.api.*;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.time.Duration;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Test cases for Swag Labs navigation and UI functionality
 * Authors: Omar Shahin, Hatem Mohamed
 */
public class NavigationTests {
    
    private WebDriver driver;
    private ProductsPage productsPage;
    private WebDriverWait wait;
    
    @BeforeEach
    public void setup() {
        WebDriverManager.setupDriver();
        WebDriverManager.navigateToBaseUrl();
        driver = WebDriverManager.getDriver();
        wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        
        // Login and navigate to products page
        LoginPage loginPage = new LoginPage();
        productsPage = loginPage.loginAs(LoginPage.STANDARD_USER, LoginPage.PASSWORD);
    }
    
    @AfterEach
    public void tearDown() {
        WebDriverManager.quitDriver();
    }
    
    /**
     * TC-023: Hamburger Menu
     * Steps:
     * 1. Click hamburger menu icon
     * Expected Result: Menu options displayed
     * Priority: Medium
     */
    @Test
    @DisplayName("TC-023: Hamburger Menu")
    public void testHamburgerMenu() {
        // Open the hamburger menu
        productsPage.openMenu();
        
        // Wait for the menu to become visible
        productsPage.waitForMenuToAppear();
        
        // Verify menu options are displayed using explicit waits
        try {
            WebElement logoutLink = wait.until(
                ExpectedConditions.visibilityOfElementLocated(By.id("logout_sidebar_link")));
            
            WebElement aboutLink = wait.until(
                ExpectedConditions.visibilityOfElementLocated(By.id("about_sidebar_link")));
            
            WebElement resetLink = wait.until(
                ExpectedConditions.visibilityOfElementLocated(By.id("reset_sidebar_link")));
            
            assertTrue(logoutLink.isDisplayed(), "Logout option should be displayed in the menu");
            assertTrue(aboutLink.isDisplayed(), "About option should be displayed in the menu");
            assertTrue(resetLink.isDisplayed(), "Reset App State option should be displayed in the menu");
        } catch (Exception e) {
            // If we can't find the elements by ID, try a different approach
            try {
                WebElement menuContainer = driver.findElement(By.className("bm-menu"));
                assertTrue(menuContainer.isDisplayed(), "Menu container should be displayed");
                assertTrue(menuContainer.getText().contains("Logout") || 
                           menuContainer.getText().contains("LOGOUT"), 
                           "Menu should contain Logout option");
            } catch (Exception ex) {
                fail("Menu items could not be found: " + ex.getMessage());
            }
        }
    }
    
    /**
     * TC-024: About Page
     * Steps:
     * 1. Open hamburger menu
     * 2. Click "About"
     * Expected Result: About page displayed
     * Priority: Low
     */
    @Test
    @DisplayName("TC-024: About Page")
    public void testAboutPage() {
        // Open the hamburger menu
        productsPage.openMenu();
        productsPage.waitForMenuToAppear();
        
        // Wait for About link to be clickable before clicking
        WebElement aboutLink = wait.until(
            ExpectedConditions.elementToBeClickable(By.id("about_sidebar_link")));
        aboutLink.click();
        
        // Verify user is redirected to Sauce Labs website
        wait.until(ExpectedConditions.urlContains("saucelabs"));
        assertTrue(driver.getCurrentUrl().contains("saucelabs.com"),
                "User should be redirected to Sauce Labs website");
    }
    
    /**
     * TC-025: Responsive Design - Mobile
     * Steps:
     * 1. Access website on mobile device or using responsive design mode
     * Expected Result: Website adapts properly to small screen
     * Priority: Medium
     */
    @Test
    @DisplayName("TC-025: Responsive Design - Mobile")
    public void testResponsiveDesignMobile() {
        // Set viewport to mobile size (iPhone X dimensions)
        driver.manage().window().setSize(new Dimension(375, 812));
        
        // Refresh page to ensure responsive layout loads
        driver.navigate().refresh();
        
        // Wait for elements to be visible after refresh
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("react-burger-menu-btn")));
        
        // Verify the menu button is displayed in mobile view
        assertTrue(driver.findElement(By.id("react-burger-menu-btn")).isDisplayed(),
                "Hamburger menu button should be displayed in mobile view");
        
        // Verify products are still visible
        assertTrue(driver.findElement(By.className("inventory_list")).isDisplayed(),
                "Product list should be visible in mobile view");
    }
    
    /**
     * TC-026: Responsive Design - Tablet
     * Steps:
     * 1. Access website on tablet device or using responsive design mode
     * Expected Result: Website adapts properly to medium screen
     * Priority: Medium
     */
    @Test
    @DisplayName("TC-026: Responsive Design - Tablet")
    public void testResponsiveDesignTablet() {
        // Set viewport to tablet size (iPad dimensions)
        driver.manage().window().setSize(new Dimension(768, 1024));
        
        // Refresh page to ensure responsive layout loads
        driver.navigate().refresh();
        
        // Wait for elements to be visible after refresh
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("react-burger-menu-btn")));
        
        // Verify the menu button is displayed in tablet view
        assertTrue(driver.findElement(By.id("react-burger-menu-btn")).isDisplayed(),
                "Hamburger menu button should be displayed in tablet view");
        
        // Verify products are visible in tablet view
        assertTrue(driver.findElement(By.className("inventory_list")).isDisplayed(),
                "Product list should be visible in tablet view");
    }
    
    /**
     * TC-028: Invalid URL Access
     * Steps:
     * 1. Attempt to access internal pages without logging in
     * Expected Result: User redirected to login page
     * Priority: Medium
     */
    @Test
    @DisplayName("TC-028: Invalid URL Access")
    public void testInvalidUrlAccess() {
        // Logout first
        productsPage.logout();
        
        // Try to access inventory page directly
        driver.get("https://www.saucedemo.com/inventory.html");
        
        // Wait for redirection and login button to be visible
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("login-button")));
        
        // Verify user is redirected to login page
        assertTrue(driver.getCurrentUrl().contains("saucedemo.com"),
                "User should be redirected to login page");
        assertTrue(driver.findElement(By.id("login-button")).isDisplayed(),
                "Login button should be visible when trying to access protected pages without login");
    }
}
